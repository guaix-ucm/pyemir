[project]
name = "pyemir"
dynamic = ["version"]
readme = "README.rst"
requires-python = ">=3.8"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Sergio Pascual", email = "sergiopr@fis.ucm.es"},
    {name = "NicolÃ¡s Cardiel", email = "cardiel@ucm.es"},
]
classifiers = [
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License (GPL)",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Astronomy",
]

dependencies = [
    "numpy >= 1.20",
    "astropy",
    "scipy >= 1.8",
    "matplotlib",
    "lmfit",
    "numina>=0.32",
    "six",
    "photutils>=1.4",
    "sep>=0.5",
    "scikit-image>=0.18",
    "scikit-learn>=0.19",
    "reproject",
    "importlib_resources",  # required with python < 3.9
]

[project.optional-dependencies]
test = [
    "pytest>=6",
    "pytest-remotedata",
]
docs = [
    "sphinx>=7",
    "sphinx_rtd_theme"
]
tool = [
    "PyQt5",
    ]

[project.urls]
Homepage = "https://github.com/guaix-ucm/pyemir"
Repository = "https://github.com/guaix-ucm/pyemirgit"
Documentation = "https://pyemir.readthedocs.io/en/stable/"

[project.entry-points."numina.pipeline.1"]
EMIR = "emirdrp.loader:load_drp"

[project.scripts]
pyemir-apply_rectification_only = "emirdrp.tools.apply_rectification_only:main"
pyemir-apply_rectwv_coeff = "emirdrp.processing.wavecal.apply_rectwv_coeff:main"
pyemir-continuum_flatfield = "emirdrp.tools.continuum_flatfield:main"
pyemir-convert_refined_multislit_param = "emirdrp.tools.convert_refined_multislit_bound_param:main"
pyemir-display_slitlet_arrangement = "emirdrp.tools.display_slitlet_arrangement:main"
pyemir-fit_boundaries = "emirdrp.tools.fit_boundaries:main"
pyemir-generate_yaml_for_abba = "emirdrp.tools.generate_yaml_for_abba:main"
pyemir-generate_yaml_for_dithered_image = "emirdrp.tools.generate_yaml_for_dithered_image:main"
pyemir-median_slitlets_rectified = "emirdrp.processing.wavecal.median_slitlets_rectified:main"
pyemir-merge_bounddict_files = "emirdrp.tools.merge_bounddict_files:main"
pyemir-merge2images = "emirdrp.tools.merge2images:main"
pyemir-rectwv_coeff_add_longslit_model = "emirdrp.processing.wavecal.rectwv_coeff_add_longslit_model:main"
pyemir-rect_wpoly_for_mos = "emirdrp.tools.rect_wpoly_for_mos:main"
pyemir-rectwv_coeff_from_arc_image = "emirdrp.processing.wavecal.rectwv_coeff_from_arc_image:main"
pyemir-rectwv_coeff_from_mos_library = "emirdrp.processing.wavecal.rectwv_coeff_from_mos_library:main"
pyemir-rectwv_coeff_to_ds9 = "emirdrp.processing.wavecal.rectwv_coeff_to_ds9:main"
pyemir-select_unrectified_slitlets = "emirdrp.tools.select_unrectified_slitlets:main"
pyemir-slitlet_boundaries_from_continuum = "emirdrp.tools.slitlet_boundaries_from_continuum:main"
pyemir-overplot_boundary_model = "emirdrp.processing.wavecal.overplot_boundary_model:main"
pyemir-overplot_bounddict = "emirdrp.tools.overplot_bounddict:main"

[build-system]
requires = ["setuptools >= 45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

# pyproject.toml
[tool.setuptools_scm]
write_to = "src/emirdrp/_version.py"